#!/usr/bin/env python3
import nmap
import yaml
from prettytable import PrettyTable

class VulnerabilityChecker:
    def __init__(self):
        self.nm = nmap.PortScanner()
        self.config = self._load_config()
    
    def _load_config(self):
        with open('config/test_cases.yaml', 'r') as f:
            return yaml.safe_load(f)
    
    def run_checks(self, target):
        results = []
        
        for check in self.config['test_cases']['vulnerability_checks']:
            if check['protocol'] == 'ICMP':
                result = self._test_icmp(target)
            else:
                result = self._test_port(target, check['protocol'], check['port'])
            
            results.append({
                'name': check['name'],
                'result': result,
                'description': check['description']
            })
        
        return results
    
    def _test_icmp(self, target):
        try:
            self.nm.scan(hosts=target, arguments='-PE')
            return self.nm[target].state() == 'up'
        except:
            return False
    
    def _test_port(self, target, protocol, port):
        try:
            self.nm.scan(hosts=target, ports=str(port), arguments=f'-s{protocol[0]}')
            return port in self.nm[target][protocol.lower()]
        except:
            return False
    
    def display_results(self, results):
        table = PrettyTable()
        table.field_names = ["Test Name", "Result", "Description"]
        
        for result in results:
            status = "OPEN" if result['result'] else "BLOCKED"
            table.add_row([result['name'], status, result['description']])
        
        print(table)

if __name__ == "__main__":
    checker = VulnerabilityChecker()
    target = input("Enter target IP: ")
    results = checker.run_checks(target)
    checker.display_results(results)
